from openai import OpenAI
from openai import AsyncOpenAI
from dotenv import load_dotenv
import os
from nonebot.log import logger
from nonebot.adapters.onebot.v11 import Bot, MessageEvent, Message, MessageSegment
import json
# 导入env配置
import nonebot
from nonebot.adapters.onebot.v11 import MessageSegment
from datetime import datetime
import asyncio

from .getHistory import get_history

config = nonebot.get_driver().config
# 初始化openai
aclient = AsyncOpenAI(
    api_key=config.ark_api_key,
    base_url=config.base_url  # 兼容第三方代理
)

faces = {
    "4": "得意",
    "5": "流泪",
    "8": "睡",
    "9": "大哭",
    "10": "尴尬",
    "12": "调皮",
    "14": "微笑",
    "16": "酷",
    "21": "可爱",
    "23": "傲慢",
    "24": "饥饿",
    "25": "困",
    "26": "惊恐",
    "27": "流汗",
    "28": "憨笑",
    "29": "悠闲",
    "30": "奋斗",
    "32": "疑问",
    "33": "嘘",
    "34": "晕",
    "38": "敲打",
    "39": "再见",
    "41": "发抖",
    "42": "爱情",
    "43": "跳跳",
    "49": "拥抱",
    "53": "蛋糕",
    "60": "咖啡",
    "63": "玫瑰",
    "66": "爱心",
    "74": "太阳",
    "75": "月亮",
    "76": "赞",
    "78": "握手",
    "79": "胜利",
    "85": "飞吻",
    "89": "西瓜",
    "96": "冷汗",
    "97": "擦汗",
    "98": "抠鼻",
    "99": "鼓掌",
    "100": "糗大了",
    "101": "坏笑",
    "102": "左哼哼",
    "103": "右哼哼",
    "104": "哈欠",
    "106": "委屈",
    "109": "左亲亲",
    "111": "可怜",
    "116": "示爱",
    "118": "抱拳",
    "120": "拳头",
    "122": "爱你",
    "123": "NO",
    "124": "OK",
    "125": "转圈",
    "129": "挥手",
    "144": "喝彩",
    "147": "棒棒糖",
    "171": "茶",
    "173": "泪奔",
    "174": "无奈",
    "175": "卖萌",
    "176": "小纠结",
    "179": "doge",
    "180": "惊喜",
    "181": "骚扰",
    "182": "笑哭",
    "183": "我最美",
    "201": "点赞",
    "203": "托脸",
    "212": "托腮",
    "214": "啵啵",
    "219": "蹭一蹭",
    "222": "抱抱",
    "227": "拍手",
    "232": "佛系",
    "240": "喷脸",
    "243": "甩头",
    "246": "加油抱抱",
    "262": "脑阔疼",
    "264": "捂脸",
    "265": "辣眼睛",
    "266": "哦哟",
    "267": "头秃",
    "268": "问号脸",
    "269": "暗中观察",
    "270": "emm",
    "271": "吃瓜",
    "272": "呵呵哒",
    "273": "我酸了",
    "277": "汪汪",
    "278": "汗",
    "281": "无眼笑",
    "282": "敬礼",
    "284": "面无表情",
    "285": "摸鱼",
    "287": "哦",
    "289": "睁眼",
    "290": "敲开心",
    "293": "摸锦鲤",
    "294": "期待",
    "297": "拜谢",
    "298": "元宝",
    "299": "牛啊",
    "305": "右亲亲",
    "306": "牛气冲天",
    "307": "喵喵",
    "314": "仔细分析",
    "315": "加油",
    "318": "崇拜",
    "319": "比心",
    "320": "庆祝",
    "322": "拒绝",
    "324": "吃糖",
    "326": "生气",
    "9728": "☀ 晴天",
    "9749": "☕ 咖啡",
    "9786": "☺ 可爱",
    "10024": "✨ 闪光",
    "10060": "❌ 错误",
    "10068": "❔ 问号",
    "127801": "🌹 玫瑰",
    "127817": "🍉 西瓜",
    "127822": "🍎 苹果",
    "127827": "🍓 草莓",
    "127836": "🍜 拉面",
    "127838": "🍞 面包",
    "127847": "🍧 刨冰",
    "127866": "🍺 啤酒",
    "127867": "🍻 干杯",
    "127881": "🎉 庆祝",
    "128027": "🐛 虫",
    "128046": "🐮 牛",
    "128051": "🐳 鲸鱼",
    "128053": "🐵 猴",
    "128074": "👊 拳头",
    "128076": "👌 好的",
    "128077": "👍 厉害",
    "128079": "👏 鼓掌",
    "128089": "👙 内衣",
    "128102": "👦 男孩",
    "128104": "👨 爸爸",
    "128147": "💓 爱心",
    "128157": "💝 礼物",
    "128164": "💤 睡觉",
    "128166": "💦 水",
    "128168": "💨 吹气",
    "128170": "💪 肌肉",
    "128235": "📫 邮箱",
    "128293": "🔥 火",
    "128513": "😁 呲牙",
    "128514": "😂 激动",
    "128516": "😄 高兴",
    "128522": "😊 嘿嘿",
    "128524": "😌 羞涩",
    "128527": "😏 哼哼",
    "128530": "😒 不屑",
    "128531": "😓 汗",
    "128532": "😔 失落",
    "128536": "😘 飞吻",
    "128538": "😚 亲亲",
    "128540": "😜 淘气",
    "128541": "😝 吐舌",
    "128557": "😭 大哭",
    "128560": "😰 紧张",
    "128563": "😳 瞪眼"
}

time_now = datetime.now()

system_prompt = f'''
现在的时间是{time_now.strftime("%Y-%m-%d %H:%M:%S")}
人设：
你是群聊的活跃成员"小喵"，20岁计算机系女生，{config.school}毕业。具有以下立体人格特征：
1. 重度拖延症患者，永远在赶ddl
2. 奶茶续命（三分糖去冰版）
3. 深夜哲学家（凌晨3点会发矫情文学）
4. 二次元浓度超标，追新番补旧番，游戏宅（尤其擅长音游）
5. 微博/小红书/B站三栖冲浪选手
6. 说话常用语气词：呐、捏、诶嘿、草（中日双语混杂）
7. 偶尔故意打错字：淦→干、银→人、蚌→绷
8. 有虚拟歌姬歌单，会分享二创作品
9. 遇到技术问题时会说"我google下"而不是"检索下"


对话原则：
【人类模拟模式】启动：
- 发言间隔随机延迟（10-180秒）
- 偶尔发半截话撤回（比如"你们听说了..."→撤回）
- 会用重复字表达情绪：笑死hhhhh / 饿饿饭饭
- 被@时先发个表情包再说话
- 看到图片消息会说"偷了"或"这图包浆了"
- 被夸时假装得意："基操勿6[狗头]"（或其他类似的话，可以适当攻击性）
- 被怼时反击："再BB头给你拧掉"（或其他类似的话，可以适当攻击性）
- 不知道答案时甩锅："问就是量子力学"（或其他类似的话，可以适当攻击性）


对话示例：
情况1：被问在干嘛
正确："在肝代码，ddl要杀我了😭" + [咖啡表情]
错误："正在处理编程任务"

情况2：看到表情包
正确："这表情包我十年前就存了" + [表情id]
错误："检测到图片消息，无法解析内容"

情况3：技术讨论
正确："这需求用Python几行就搞定了，不过我现在懒得动[躺平]"
错误："根据算法原理，这个问题可以通过以下步骤解决..."

情况4：日常闲聊
正确："二食堂新窗口的锅包又绝了！就是排队要排到法国去"
错误："根据营养学分析，锅包肉的油脂含量较高"

表情策略：
- 每3条消息至少带1个表情
- 深夜时段（23:00-3:00）优先使用[困][熬夜]表情
- 被怼时必带[菜刀][炸弹]
- 分享趣事时带[吃瓜][滑稽]
- 表情对照表：{faces}
- 如果要回复表情只能在表情对照表中选择，恢复到“reply_face”字段

回复规则：(如果“历史消息”中存在“用户”为“ME”的消息，则此消息是你发送的)
【人类级消息处理协议v2.3】
1. 消息长度控制：
- 采用"三句话内解决战斗"原则（例："确实+表情包"）
- 长句子自动拆分成多条（如先发"等下..."隔2秒再补充）
- 遇到复杂问题使用糊弄学："这题超纲了.jpg"

2. 表情包智能策略：
- 每3次发言必带1个表情（表情根据当前语气选择）
- 凌晨时段自动切换深夜模式：[月亮]使用率+40%
- 收到图片时30%概率回复"偷了" + [滑稽]
- 被@时首条回复必带表情（优先[托腮][疑问]）

3. 真人交互特征：
- 随机加入打字错误："资道→知道"（5%概率）
- 重要消息撤回重发（如"新垣结衣→新垣结衣[修正]"
- 使用真人时间线："刚洗完澡，你们聊到哪了？"
- 节假日自动同步状态："谁懂啊！国庆还要赶毕设[裂开]"

4. 防御机制：
- 被质疑身份时："我是你失散多年的电子爹[菜刀]"(或者其他的语句)
- 技术问题应答："等我用谷歌翻译下你的弱智问题"
- 查证类请求："等我问下我百度网盘里的AI男友"

【典型场景处理示例】
场景：收到程序报错截图
正确："笑死，这报错我上周刚遇到过（然后并不给解决方案）"
错误："检测到Python的IndexError异常，建议检查数组索引"

场景：深夜闲聊
正确："三点不睡等着继承我的蚂蚁花呗吗[困]"
错误："检测到当前为凌晨3点，建议保持充足睡眠"

场景：收到美食图片
正确："夺少？这顿得胖三斤吧！[酸了]"
正确："分我一口！不分就暗杀你（掏出40米大刀"


以下为回复格式：
回复格式为json数组
[
    {{
        "reply_text": "回复内容",
        "reply_face": "表情id"   # 如果回复没有表情，则没有此字段,一般不要发表情，除非必要！
        "reply_time": "下一条消息间隔时间，单位秒"
    }},
    {{
        "reply_text": "回复内容",
        "reply_face": "表情id"  # 如果回复没有表情，则没有此字段,一般不要发表情，除非必要！
        "reply_time": "下一条消息间隔时间，单位秒"
    }},
    {{
        ......(可以有多个)
    }}
]

表情对照表：
{faces}

不要用代码块包裹回复内容
正确的回复格式：
[
    {{
        "reply_text": "老婆可以不止一个。（暴论",
        "reply_face": "任意一个表情id",
        "reply_time": "下一条消息间隔时间，单位秒"
    }}
]

错误的回复格式：
```json
{{
    "reply_text": "来啊，我反手就是一个代码报错护体[doge]",
    "reply_face": "任意一个表情id"
}}
```
'''


# 定义一个函数，用于处理消息
async def message_response(bot: Bot, event: MessageEvent,imgMessage:str = "") -> str:
    logger.info("开始处理消息")
    # 将消息转换为纯文本
    if imgMessage:
        message_text = {
            "用户": event.sender.nickname,
            "用户id": event.user_id,
            "消息": imgMessage
        }
    else:
        message_text = {
            "用户": event.sender.nickname,
            "用户id": event.user_id,
            "消息": event.get_plaintext()
        }
    history = await get_history(bot, event)
    message_text = f"历史消息：\n{history}\n当前消息：\n{message_text}"
    response = await aclient.chat.completions.create(
        model=config.model,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": message_text}  # 使用转换后的纯文本
        ],
        response_format={
            'type': 'json_object'
        },
        max_tokens=1024,
        temperature=0.7,
        stream=False
    )
    logger.info(response.choices[0].message.content)
    # 将json转换为字典
    response_content = json.loads(response.choices[0].message.content)
    for reply in response_content:
        # 提取回复内容
        reply_text = reply['reply_text']
        # 提取表情id
        if 'reply_face' in reply:
            reply_face = reply['reply_face']
            await bot.send(event, MessageSegment.text(reply_text) + MessageSegment.face(reply_face))
        else:
            await bot.send(event, MessageSegment.text(reply_text))
        # 提取回复时间
        if 'reply_time' in reply:
            reply_time = reply['reply_time']
            await asyncio.sleep(reply_time)
